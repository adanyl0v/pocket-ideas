// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/cache/cache.go

// Package mock_cache is a generated GoMock package.
package mock_cache

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockConn is a mock of Conn interface.
type MockConn struct {
	ctrl     *gomock.Controller
	recorder *MockConnMockRecorder
}

// MockConnMockRecorder is the mock recorder for MockConn.
type MockConnMockRecorder struct {
	mock *MockConn
}

// NewMockConn creates a new mock instance.
func NewMockConn(ctrl *gomock.Controller) *MockConn {
	mock := &MockConn{ctrl: ctrl}
	mock.recorder = &MockConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConn) EXPECT() *MockConnMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockConn) Delete(ctx context.Context, keys ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockConnMockRecorder) Delete(ctx interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockConn)(nil).Delete), varargs...)
}

// DeleteJSON mocks base method.
func (m *MockConn) DeleteJSON(ctx context.Context, key, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJSON", ctx, key, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteJSON indicates an expected call of DeleteJSON.
func (mr *MockConnMockRecorder) DeleteJSON(ctx, key, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJSON", reflect.TypeOf((*MockConn)(nil).DeleteJSON), ctx, key, path)
}

// Exists mocks base method.
func (m *MockConn) Exists(ctx context.Context, keys ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exists", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockConnMockRecorder) Exists(ctx interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockConn)(nil).Exists), varargs...)
}

// Get mocks base method.
func (m *MockConn) Get(ctx context.Context, key string, dest any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key, dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockConnMockRecorder) Get(ctx, key, dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConn)(nil).Get), ctx, key, dest)
}

// GetJSON mocks base method.
func (m *MockConn) GetJSON(ctx context.Context, key, path string, dest any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJSON", ctx, key, path, dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetJSON indicates an expected call of GetJSON.
func (mr *MockConnMockRecorder) GetJSON(ctx, key, path, dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJSON", reflect.TypeOf((*MockConn)(nil).GetJSON), ctx, key, path, dest)
}

// Set mocks base method.
func (m *MockConn) Set(ctx context.Context, key string, value any, expiration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockConnMockRecorder) Set(ctx, key, value, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockConn)(nil).Set), ctx, key, value, expiration)
}

// SetJSON mocks base method.
func (m *MockConn) SetJSON(ctx context.Context, key, path string, value any, expiration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetJSON", ctx, key, path, value, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetJSON indicates an expected call of SetJSON.
func (mr *MockConnMockRecorder) SetJSON(ctx, key, path, value, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetJSON", reflect.TypeOf((*MockConn)(nil).SetJSON), ctx, key, path, value, expiration)
}
